- name: Install ContainerD runtime
  hosts: all
  tasks:
    - name: Download Containerd
      get_url:
        url: "https://github.com/containerd/containerd/releases/download/v1.7.7/containerd-1.7.7-linux-arm64.tar.gz"
        dest: "/tmp/containerd-1.7.7-linux-arm64.tar.gz"

    - name: Ensure Containerd unpack destination
      file:
        path: /usr/local
        state: directory

    - name: Extract Containerd archive
      command: "tar Cxzvf /usr/local /tmp/containerd-1.7.7-linux-arm64.tar.gz"

    - name: Ensure Containerd Service destination
      file:
        path: /usr/local/lib/systemd/system
        state: directory

    - name: Download Containerd Service
      get_url:
        url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
        dest: /usr/local/lib/systemd/system/

    - name: Download runc
      get_url:
        url: "https://github.com/opencontainers/runc/releases/download/v1.1.9/runc.arm64"
        dest: "/tmp/runc.arm64"

    - name: Install runc
      command: "install -m 755 /tmp/runc.arm64 /usr/local/sbin/runc"

    - name: Download CNI Plugins
      get_url:
        url: "https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-arm-v1.3.0.tgz"
        dest: "/tmp/cni-plugins-linux-arm-v1.3.0.tgz"

    - name: Install CNI Plugins
      command: "{{ item }}"
      with_items:
        - "mkdir -p /opt/cni/bin"
        - "tar Cxzvf /opt/cni/bin /tmp/cni-plugins-linux-arm-v1.3.0.tgz"

    - name: Remove downloaded binaries
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/runc.arm64
        - /tmp/containerd-1.7.7-linux-arm64.tar.gz
        - /tmp/cni-plugins-linux-arm-v1.3.0.tgz

    - name: Create modules-load.d/k8s.conf file if it doesn't exist
      file:
        path: /etc/modules-load.d/k8s.conf
        state: touch
      become: true

    - name: Edit modules-load.d
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        line: "{{ item }}"
      loop:
        - "overlay"
        - "br_netfilter"

    - name: Add Module Overlay
      command: "sudo modprobe overlay"

    - name: Add Module br_netfilter
      command: "sudo modprobe br_netfilter"

    - name: Create systctl.d/k8s.conf file if it doesn't exist
      file:
        path: /etc/sysctl.d/k8s.conf
        state: touch
      become: true

    - name: Edit sysctl.d
      lineinfile:
        path: "/etc/sysctl.d/k8s.conf"
        line: "{{ item }}"
      loop:
        - "net.bridge.bridge-nf-call-iptables  = 1"
        - "net.bridge.bridge-nf-call-ip6tables = 1"
        - "net.ipv4.ip_forward                 = 1"

    - name: Create /etc/containerd dir if it doesnt exist
      file:
        path: /etc/containerd
        state: directory

    - name: Create /etc/containerd/config.toml file if it doesn't exist
      file:
        path: /etc/containerd/config.toml
        state: touch
      become: true

    - name: Sysctl
      command: "sudo sysctl --system"

    - name: Configure Containerd
      shell: |
        sudo mkdir -p /etc/containerd/
        containerd config default | sudo tee /etc/containerd/config.toml
        sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

    - name: Start Containerd Service
      shell: |
        systemctl daemon-reload && systemctl enable --now containerd

- name: Install K8s Tools
  hosts: all
  tasks:
    - name: Setup package repository
      shell: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

    - name: Install K8s Tools
      shell: |
        sudo apt-get update
        sudo apt-get install -y kubelet kubeadm kubectl
        sudo apt-mark hold kubelet kubeadm kubectl
#
#- name: Setup ControllerPane
#  hosts: all
#  tasks:
#    - name: Init
#      command: "kubeadm init --pod-network-cidr=10.244.0.0/16"
#
##    - name: Apply Flannel CNI
##      command: "kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml"
#
#      # https://github.com/flannel-io/flannel/issues/1344
#      # Flannel having Error
