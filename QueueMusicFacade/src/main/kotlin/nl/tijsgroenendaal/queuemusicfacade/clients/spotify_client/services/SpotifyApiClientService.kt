package nl.tijsgroenendaal.queuemusicfacade.clients.spotify_client.services

import nl.tijsgroenendaal.queuemusicfacade.clients.spotify_client.clients.SpotifyApiClient
import nl.tijsgroenendaal.queuemusicfacade.clients.spotify_client.clients.SpotifyLoginClient
import nl.tijsgroenendaal.queuemusicfacade.clients.spotify_client.commands.CreatePlaylistCommand
import nl.tijsgroenendaal.queuemusicfacade.clients.spotify_client.commands.responses.CreatePlaylistCommandResponse
import nl.tijsgroenendaal.queuemusicfacade.clients.spotify_client.query.responses.track.GetTrackQueryResponse
import nl.tijsgroenendaal.queuemusicfacade.clients.spotify_client.query.responses.users.GetMeQueryResponse
import nl.tijsgroenendaal.queuemusicfacade.entity.UserLinkModel
import nl.tijsgroenendaal.qumu.exceptions.BadRequestException
import nl.tijsgroenendaal.qumu.exceptions.SessionSongErrorCode

import feign.FeignException

import org.springframework.stereotype.Service

private const val PLAYLIST_DESCRIPTION = "Autogenerated playlist by QueueMusic API"

@Service
class SpotifyApiClientService(
    private val spotifyApiClient: SpotifyApiClient,
    private val spotifyLoginClient: SpotifyLoginClient
) {

    /**
     * Use this when you have no AuthenticationContext configured
     */
    fun getMe(accessCode: String): GetMeQueryResponse {
        return spotifyLoginClient.getMeWithAccessToken("Bearer $accessCode")
    }

    fun getMe(): GetMeQueryResponse {
        return spotifyApiClient.getMe()
    }

    fun getMyPlaylists(): Any {
        return spotifyApiClient.getMyPlaylists()
    }

    fun getTrack(songId: String, accessCode: String): GetTrackQueryResponse {
        return try {
            spotifyLoginClient.getTrack("Bearer $accessCode", songId)
        } catch (e: FeignException) {
            throw BadRequestException(SessionSongErrorCode.TRACK_NOT_FOUND, "Track $songId not found")
        }
    }

    fun createPlaylist(userLink: UserLinkModel, name: String): CreatePlaylistCommandResponse {
        return spotifyApiClient.createPlaylists(userLink.linkId, CreatePlaylistCommand(
            name,
            PLAYLIST_DESCRIPTION
        ))
    }

}